import java.util.*;
public class sumsubarray {
    public static void main(String[] args) {
        int[] arr={23,2,4,6,7};
        int k=13;
       System.out.println(sum(arr,k));
       
    }
    public static boolean sum(int[] nums, int k) {
        if (nums.length < 2) {
            return false;
        }

        for (int start = 0; start < nums.length - 1; start++) {
            int sum = nums[start];
            for (int end = start + 1; end < nums.length; end++) {
                sum += nums[end];
                if (sum % k == 0) {
                    return true;
                }
            }
        }

        return false;
    }
}


//Another approach for this question is:---
 time complexity O(N).


 public static boolean subarray(int[] a,int k)
    {
       int b[]=new int[k];
       int count=0,sum=0;
       b[0]=1;
       for(int num:a)
       {
        sum+=num;
        int rem=sum%k;
        if(rem<0)
        {
            rem+=k;
        }
        count+=b[rem];
        b[rem]++;
       }
        if (count==0)
        {
            return false;
        }
        return true;
    }
